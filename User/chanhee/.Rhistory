as.integer(num_of_samples*0.2)+1
length(num_of_samples)
train_index <- rand_index[as.integer(num_of_samples*0.2)+1:num_of_samples]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
genes <- colnames(data[,-"result"])
genes <- colnames(data[,!"result"])
data[,-1]
result <- names(data) %in% "result"
genes <- colnames(data[,!result])
?glm
glm_model<-glm(result~genes[1],"binary",train)
glm_model<-glm(result~genes[1],"binomial",train)
genes[1]
View(train)
glm_model<-glm(result~DDR1,"binomial",train)
glm_model<-glm(result~"DDR1","binomial",train)
glm_model<-glm(result~DDR1,"binomial",train)
glm_model
genes[1]
glm_model<-glm(y=result, x=DDR1,"binomial",train)
glm_model<-glm(y=result, x=DDR1,family = "binomial",data = train)
glm_model<-glm(result~DDR1,family = "binomial",data = train)
glm_model<-glm(result~get(genes[1]),family = "binomial",data = train)
summary(glm_model)
glm_model<-glm(result~DDR!,family = "binomial",data = train)
glm_model<-glm(result~DDR1,family = "binomial",data = train)
glm_model
abs(-10)
glm_model$coefficients
glm_model$coefficients[2]
beta<-glm_model$coefficients[get(genes[1])]
beta<-glm_model$coefficients[genes[1]]
beta<-glm_model$coefficients[genes[1]]
beta
beta<-abs(glm_model$coefficients[genes[1]])
beta
top30 <- c()
top30 <- c(0)
min_beta<-min(top30)
top30 <- c()
length(top30)
min_beta<-0
if(beta>min(top30)){
}
for(i in 1:num_of_samples){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
betas <- c()
for(i in 1:num_of_samples){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
for(i in 1:10{
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
a<-c()
a<-c(a,1)
a
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
summary(glm_model)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
print(glm_model)
beta<-abs(glm_model$coefficients[genes[i]])
betas<-c(betas,beta)
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
print(beta)
betas<-c(betas,beta)
}
abs(glm_model$coefficients[genes[1]])
glm_model
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[genes[i]])
print(genes[i])
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
gene<-as.character(genes[i])
beta<-abs(glm_model$coefficients[gene])
print(beta)
}
glm_model
gene
glm_model$coefficients[gene]
get(gene)
beta<-abs(glm_model$coefficients[2])
print(beta)
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[2])
print(beta)
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
print(beta)
}
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(beta,betas)
}
betas
betas <- c()
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas
num_of_attributes<-dim(data)[2]-1
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = "binomial",data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
warnings()
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
sort(betas)
rm(betas)
betas <- c()
for(i in 1:10){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
sort(betas)
betas
?sort
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
betas <- c()
num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
betas_name<-names(betas30)
betas
x<-names(betas30)
y<-"result"
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = response)
train_predict<-predict(final_model,newdata = train,type = "response")
tble<-table(train_predict,actual.class = train$result)
tble
train_predict<-ifelse(train_predict>0.5,1,0)
tble<-table(train_predict,actual.class = train$result)
tble
accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
num_of_attributes=100
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
report
?write.csv
num_of_attributes<-dim(data)[2]-1
betas <- c()
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
head(betas30)
data2<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
View(data2)
betas30[3]
names(betas30[3])
?paste
head(x)
flma<-paste(y,paste(x,sep = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
paste(x,sep = "+")
names()
betas30
flma<-paste(y,paste(x,sep = ",",collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
flma<-paste(y,paste(x,sep = "+"),sep = "~")
flma
paste(x,sep = "+")
paste(x,collapse =  = "+")
paste(x,collapse ="+")
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
library(stringr)
str_trim("  gf gg gg")
str_replace("gg \\\ gg"," ")
?str_replace
str_replace("gg \\\ gg"," ","")
gg\\ gg
"gg\\ gg"
"gg\\gg"
str_replace_all("gg \\\ gg"," ")
str_replace_all("gg \\\ gg"," ","")
a<-c("gg \\ gg","bbb \\ bb")
str_replace_all(a," ","")
r_name<-str_replace_all(r_name," ","")
colnames(data)<-r_name
data$result<-result[,2]
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
num_of_attributes<-1000
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
write.csv(report,"logistic_result.csv")
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
num_of_attributes = 200
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
write.csv(report,"logistic_result.csv")
betas30
?step
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
null_model<-glm(result~1,data=train)
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
prediction<-data.frame()
testsetCopy<-data.frame()
View(data)
data<-read.csv("/home/tjahn/Data/DNN_log_10000.csv")
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
genes <- colnames(data[,!results])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
}
View(train)
View(test)
names(data) %in% "result"
View(data)
View(data)
data$id
reports=data.frame()
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
reports=data.frame()
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
results <- names(data) %in% "result"
num_of_attributes<-dim(data)[2]-2
genes <- colnames(data[,!results])
betas <- c()
#num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
# Model Fitting
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
reports<-rbind(reports,report)
}
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
results <- names(data) %in% "result"
num_of_attributes<-dim(data)[2]-2
genes <- colnames(data[,!results])
betas <- c()
num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
# Model Fitting
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
reports<-rbind(reports,report)
}
View(reports)
