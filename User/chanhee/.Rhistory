}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
betas_name<-names(betas30)
betas
x<-names(betas30)
y<-"result"
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = response)
train_predict<-predict(final_model,newdata = train,type = "response")
tble<-table(train_predict,actual.class = train$result)
tble
train_predict<-ifelse(train_predict>0.5,1,0)
tble<-table(train_predict,actual.class = train$result)
tble
accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(tble[1,1]+tble[2,2])/sum(tble)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
num_of_attributes=100
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
report
?write.csv
num_of_attributes<-dim(data)[2]-1
betas <- c()
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
head(betas30)
data2<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
View(data2)
betas30[3]
names(betas30[3])
?paste
head(x)
flma<-paste(y,paste(x,sep = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
paste(x,sep = "+")
names()
betas30
flma<-paste(y,paste(x,sep = ",",collapse = "+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
flma<-paste(y,paste(x,sep = "+"),sep = "~")
flma
paste(x,sep = "+")
paste(x,collapse =  = "+")
paste(x,collapse ="+")
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
library(stringr)
str_trim("  gf gg gg")
str_replace("gg \\\ gg"," ")
?str_replace
str_replace("gg \\\ gg"," ","")
gg\\ gg
"gg\\ gg"
"gg\\gg"
str_replace_all("gg \\\ gg"," ")
str_replace_all("gg \\\ gg"," ","")
a<-c("gg \\ gg","bbb \\ bb")
str_replace_all(a," ","")
r_name<-str_replace_all(r_name," ","")
colnames(data)<-r_name
data$result<-result[,2]
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
num_of_attributes<-1000
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
write.csv(report,"logistic_result.csv")
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
num_of_attributes = 200
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
train_predict<-predict(final_model,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
write.csv(report,"logistic_result.csv")
betas30
?step
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
rand_index <- sample(1:num_of_samples,num_of_samples)
test_index <- rand_index[1:as.integer(num_of_samples*0.2)]
train_index <- rand_index[as.integer(num_of_samples*0.2+1):num_of_samples]
train<-data[train_index,]
test<-data[test_index,]
results <- names(data) %in% "result"
genes <- colnames(data[,!results])
num_of_attributes<-dim(data)[2]-1
betas <- c()
num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
null_model<-glm(result~1,data=train)
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(final_model,newdata = test,type = "response")
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
prediction<-data.frame()
testsetCopy<-data.frame()
View(data)
data<-read.csv("/home/tjahn/Data/DNN_log_10000.csv")
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
genes <- colnames(data[,!results])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
result<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/CancerResult_log.csv")
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
num_of_samples <- dim(data)[1]
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
}
View(train)
View(test)
names(data) %in% "result"
View(data)
View(data)
data$id
reports=data.frame()
k = 5
data$id<-sample(1:k,nrow(data),replace = TRUE)
list = 1:k
reports=data.frame()
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
results <- names(data) %in% "result"
num_of_attributes<-dim(data)[2]-2
genes <- colnames(data[,!results])
betas <- c()
#num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
# Model Fitting
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
reports<-rbind(reports,report)
}
for(i in 1:k){
train<-subset(data, id %in% list[-i])
test<-subset(data, id %in% c(i))
results <- names(data) %in% "result"
num_of_attributes<-dim(data)[2]-2
genes <- colnames(data[,!results])
betas <- c()
num_of_attributes = 10
for(i in 1:num_of_attributes){
glm_model<-glm(result~get(genes[i]),family = binomial(link = logit),data = train)
beta<-abs(glm_model$coefficients[2])
names(beta)<-genes[i]
betas<-c(betas,beta)
}
betas <- sort(betas,decreasing = TRUE)
betas30<- betas[1:as.integer(0.3*num_of_attributes)]
# Model Fitting
y<-"result"
x<-names(betas30)
flma<-paste(y,paste(x,collapse ="+"),sep = "~")
final_model<-glm(flma,family = binomial(link = logit),data = train)
model.aic.forward<-step(final_model,direction = "forward")
train_predict<-predict(model.aic.forward,newdata = train,type = "response")
train_predict<-ifelse(train_predict>0.5,1,0)
train_tble<-table(train_predict,actual.class = train$result)
train_accuracy<-(train_tble[1,1]+train_tble[2,2])/sum(train_tble)
test_predict<-predict(model.aic.forward,newdata = test,type = "response")
test_predict<-ifelse(test_predict>0.5,1,0)
test_tble<-table(test_predict,actual.class = test$result)
test_accuracy<-(test_tble[1,1]+test_tble[2,2])/sum(test_tble)
report<-data.frame(test = test_accuracy, train = train_accuracy)
reports<-rbind(reports,report)
}
View(reports)
data<-read.csv("/Users/chanhee/Desktop/BioDataLab/User/chanhee/DNN_log_10000.csv")
names(data)
library(stringr)
r_name<-as.character(data[,2])
data<-as.data.frame(t(data[,c(-1,-2,-3,-length(data))]))
r_name<-str_replace_all(r_name," /// ","")
colnames(data)<-r_name
data$result<-result[,2]
sample(1:5,10,replace = FALSE)
sample(1:5,10)
sample(1:5,10,replace=TRUE)
a<-ample(1:5,10,replace=TRUE)
a<-smple(1:5,10,replace=TRUE)
a<-sample(1:5,10,replace=TRUE)
a<-a[order(a)]
a
a<-a[order(a,reverse=TRUE)]
a<-a[rev(order(a))]
a
data<-MergeToyFile(1000,"/Users/chanhee/Google Drive/RA/DATA/cancer_normal_database/GEO_GPL570")
SelectFile<-function(filenames){
randVector=sample(1:length(filenames),replace = FALSE)
return(filenames[randVector])
}
MergeUntil<-function(filenames,n){
data<-read.table(filenames[1],header=TRUE)
GSM<-colnames(data[4:length(data)])
diagnose<-rep(as.integer(substr(filenames[1],nchar(filenames[1])-4,nchar(filenames[1])-4),times=length(GSM)))
cancer<-data.frame(GSM_NUMBER=GSM,CANCER=diagnose)
i=2
while(i<10 &&i<length(filenames)){
Ndata<-read.table(filenames[i],header=TRUE)
#print (paste(n, " : ", filenames[i], " dim: " , dim(data)[1], ", ", dim(data)[2], " na: ", sum(is.na(data)) , " i: " , i , sep="") )
#print( paste("is new data contain na? count of nas in the Ndata: ", sum(is.na(Ndata)) ) )
if(nrow(Ndata)==nrow(data) && all(data$Gene_Symbol==Ndata$Gene_Symbol)){
data<-cbind(data,Ndata[,c(-1,-2,-3)])
NGSM<-colnames(Ndata[4:length(Ndata)])
Ndiagnose<-rep(as.integer(substr(filenames[i],nchar(filenames[i])-4,nchar(filenames[i])-4),times=length(NGSM)))
Ncancer<-data.frame(GSM_NUMBER=NGSM,CANCER=Ndiagnose)
cancer<-rbind(cancer,Ncancer)
}
i=i+1
#drop sample which contains at least one NA
index = colSums(is.na(data)) == 0
end = length(data)
Rindex = index[4:end]
data = data[ , index]
#drop samples in CancerResult also
cancer=cancer[Rindex,]
}
print( c(n, " : " , sum(is.na(data)) ) )
return(list(x=data,y=cancer))
}
MergeToyFile<-function(n,mypath){
filenames<-list.files(path = mypath,full.names = TRUE)
filenames<-SelectFile(filenames)
datalist <- MergeUntil(filenames,n)
return(datalist)
}
NormalizeToy<-function(RawToy){
for(i in 4:length(colnames(RawToy))){
RawToy[,i]<-(RawToy[,i]-mean(RawToy[,i]))/sd(RawToy[,i])
}
return(RawToy)
}
GetVar<-function(Toy1000){
Toy1000$VAR<-apply(Toy1000[,4:length(Toy1000)],1,sd)
return(Toy1000)
}
set.seed(2017)
data<-MergeToyFile(1000,"/Users/chanhee/Google Drive/RA/DATA/cancer_normal_database/GEO_GPL570")
RawToy<-data$x
RawToy<-RawToy[RawToy$Gene_Symbol!="",]
RawToy<-RawToy[!duplicated(RawToy[,2]),]
maxs = sapply( RawToy[, c(-1,-2,-3)], max )
not_log2_scale_ids = names( which(maxs > 100 ) )
for( j in 1 : length(not_log2_scale_ids ) ) {
exception = RawToy[,not_log2_scale_ids[j]]<1
RawToy[exception,not_log2_scale_ids[j]] = 1
temp = log2( RawToy[,not_log2_scale_ids[j] ] )
RawToy[,not_log2_scale_ids[j] ] = temp
}
Toy1000<- NormalizeToy(RawToy)
Toy1000<-GetVar(Toy1000)
temp1<-Toy1000[,c(1,2,3)]
temp2<-round(Toy1000[,c(-1,-2,-3)],digits = 3)
Toy1000<-cbind(temp1,temp2)
Toy1000<-Toy1000[rev(order(Toy1000$VAR)),]
View(Toy1000)
Toy1000<-Toy1000[1:6000,]
r_name<-as.character(Toy1000[,2])
data<-as.data.frame(t(Toy1000[c(-1,-2,-3),]))
r_name<-str_replace_all(r_name," /// ","")
library(stringr)
r_name<-as.character(Toy1000[,2])
data<-as.data.frame(t(Toy1000[c(-1,-2,-3),]))
r_name<-str_replace_all(r_name," /// ","")
r_name<-str_replace_all(r_name,"/","")
View(data)
View(Toy1000)
data<-as.data.frame(t(Toy1000[c(-1,-2,-3),]))
View(data)
data<-as.data.frame(t(Toy1000[c(-1,-2,-3,VAR),]))
data<-as.data.frame(t(Toy1000[c(-1,-2,-3,-length(Toy1000)),]))
View(Toy1000)
Toy1000<-Toy1000[c(-1,-2,-3,-length(Toy1000)),]
View(Toy1000)
RawToy<-data$x
RawToy<-RawToy[RawToy$Gene_Symbol!="",]
RawToy<-RawToy[!duplicated(RawToy[,2]),]
maxs = sapply( RawToy[, c(-1,-2,-3)], max )
not_log2_scale_ids = names( which(maxs > 100 ) )
for( j in 1 : length(not_log2_scale_ids ) ) {
exception = RawToy[,not_log2_scale_ids[j]]<1
RawToy[exception,not_log2_scale_ids[j]] = 1
temp = log2( RawToy[,not_log2_scale_ids[j] ] )
RawToy[,not_log2_scale_ids[j] ] = temp
}
Toy1000<- NormalizeToy(RawToy)
Toy1000<-GetVar(Toy1000)
RawToy<-data$x
RawToy<-RawToy[RawToy$Gene_Symbol!="",]
datas<-MergeToyFile(10000,"/home/tjahn/Data/cancer_normal_database/GEO_GPL570")
data<-MergeToyFile(1000,"/Users/chanhee/Google Drive/RA/DATA/cancer_normal_database/GEO_GPL570")
datas<-data
RawToy<-datas$x
CancerResult<-datas$y
RawToy<-RawToy[RawToy$Gene_Symbol!="",]
RawToy<-RawToy[!duplicated(RawToy[,2]),]
maxs = sapply( RawToy[, c(-1,-2,-3)], max )
not_log2_scale_ids = names( which(maxs > 100 ) )
for( j in 1 : length(not_log2_scale_ids ) ) {
exception = RawToy[,not_log2_scale_ids[j]]<1
RawToy[exception,not_log2_scale_ids[j]] = 1
temp = log2( RawToy[,not_log2_scale_ids[j] ] )
RawToy[,not_log2_scale_ids[j] ] = temp
}
Toy1000<- NormalizeToy(RawToy)
Toy1000<-GetVar(Toy1000)
temp1<-Toy1000[,c(1,2,3)]
View(temp1)
temp2<-round(Toy1000[,c(-1,-2,-3)],digits = 3)
Toy1000<-cbind(temp1,temp2)
View(Toy1000)
Toy1000<-Toy1000[rev(order(Toy1000$VAR)),]
Toy1000<-Toy1000[1:6000,]
library(stringr)
r_name<-as.character(Toy1000[,2])
data<-Toy1000[c(-1,-2,-3,-length(Toy1000)),]
View(data)
data<-Toy1000[,c(-1,-2,-3,-length(Toy1000))]
View(data)
data<-as.data.frame(t(data))
r_name<-str_replace_all(r_name," /// ","")
r_name<-str_replace_all(r_name,"/","")
colnames(data)<-r_name
data$result<-CancerResult[,2]
data$index<-sample(1:5,dim(data)[1],replace = TRUE)
data
View(data)
data$index
data$result
table(data$result)
dim(data)
print("Cancer Result ratio")
table(data$result)
print("Number of Data")
dim(data)
